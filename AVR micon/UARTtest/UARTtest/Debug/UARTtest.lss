
UARTtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001c1  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000014a  00000000  00000000  00000343  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000017e  00000000  00000000  0000048d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  0000009c  00000000  00000000  0000060c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001a6  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000de  00000000  00000000  0000084e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	16 c0       	rjmp	.+44     	; 0x3c <__vector_7>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	2a d0       	rcall	.+84     	; 0x84 <main>
  30:	48 c0       	rjmp	.+144    	; 0xc2 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <USART_Transmit>:
	return UDR; /*受信ﾃﾞｰﾀ取得 */
}

void USART_Transmit(unsigned char data)
{
	while(!(UCSRA&(1<<UDRE))); /*送信ﾊﾞｯﾌｧ空き待機 */
  34:	5d 9b       	sbis	0x0b, 5	; 11
  36:	fe cf       	rjmp	.-4      	; 0x34 <USART_Transmit>
	UDR=data; /*ﾃﾞｰﾀ送信(送信開始)*/
  38:	8c b9       	out	0x0c, r24	; 12
  3a:	08 95       	ret

0000003c <__vector_7>:
}

ISR(USART_RX_vect)
{	
  3c:	1f 92       	push	r1
  3e:	0f 92       	push	r0
  40:	0f b6       	in	r0, 0x3f	; 63
  42:	0f 92       	push	r0
  44:	11 24       	eor	r1, r1
  46:	2f 93       	push	r18
  48:	3f 93       	push	r19
  4a:	4f 93       	push	r20
  4c:	5f 93       	push	r21
  4e:	6f 93       	push	r22
  50:	7f 93       	push	r23
  52:	8f 93       	push	r24
  54:	9f 93       	push	r25
  56:	af 93       	push	r26
  58:	bf 93       	push	r27
  5a:	ef 93       	push	r30
  5c:	ff 93       	push	r31
	char data = UDR;
  5e:	8c b1       	in	r24, 0x0c	; 12
	USART_Transmit(data);
  60:	e9 df       	rcall	.-46     	; 0x34 <USART_Transmit>
}
  62:	ff 91       	pop	r31
  64:	ef 91       	pop	r30
  66:	bf 91       	pop	r27
  68:	af 91       	pop	r26
  6a:	9f 91       	pop	r25
  6c:	8f 91       	pop	r24
  6e:	7f 91       	pop	r23
  70:	6f 91       	pop	r22
  72:	5f 91       	pop	r21
  74:	4f 91       	pop	r20
  76:	3f 91       	pop	r19
  78:	2f 91       	pop	r18
  7a:	0f 90       	pop	r0
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	0f 90       	pop	r0
  80:	1f 90       	pop	r1
  82:	18 95       	reti

00000084 <main>:


int main(void)
{
	UBRRH=0;
  84:	12 b8       	out	0x02, r1	; 2
	UBRRL=8;
  86:	88 e0       	ldi	r24, 0x08	; 8
  88:	89 b9       	out	0x09, r24	; 9
	UCSRA|=0b00000010;
  8a:	59 9a       	sbi	0x0b, 1	; 11
	UCSRC=(1<<USBS)|(3<<UCSZ0);
  8c:	8e e0       	ldi	r24, 0x0E	; 14
  8e:	83 b9       	out	0x03, r24	; 3
	UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
  90:	88 e9       	ldi	r24, 0x98	; 152
  92:	8a b9       	out	0x0a, r24	; 10
	OSCCAL=0x58;
  94:	88 e5       	ldi	r24, 0x58	; 88
  96:	81 bf       	out	0x31, r24	; 49
	DDRD = 0b00000100;	
  98:	84 e0       	ldi	r24, 0x04	; 4
  9a:	81 bb       	out	0x11, r24	; 17
	
	PORTD = 0b00000100;
  9c:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f e3       	ldi	r18, 0x3F	; 63
  a0:	8d e0       	ldi	r24, 0x0D	; 13
  a2:	93 e0       	ldi	r25, 0x03	; 3
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x20>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x2a>
  ae:	00 00       	nop
	_delay_ms(1000);
	PORTD = 0b00000000;
  b0:	12 ba       	out	0x12, r1	; 18
  b2:	87 ea       	ldi	r24, 0xA7	; 167
  b4:	91 e6       	ldi	r25, 0x61	; 97
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x32>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x38>
  bc:	00 00       	nop
	_delay_ms(100);
	
	sei();
  be:	78 94       	sei
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <main+0x3c>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
