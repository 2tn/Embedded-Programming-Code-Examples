
ADC test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  00000772  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000772  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000078  00000000  00000000  000007a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000368  00000000  00000000  0000081a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001c1  00000000  00000000  00000b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000225  00000000  00000000  00000d43  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000013c  00000000  00000000  00000f68  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000222  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000423  00000000  00000000  000012c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000068  00000000  00000000  000016e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 74 01 	call	0x2e8	; 0x2e8 <main>
  88:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <PWM_initialize>:
																		//8分周しているので動作クロックは8MHz
    }
}

void PWM_initialize(){							//PWMの初期化関数
	TCCR0A  =(1<<WGM01);
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	84 bd       	out	0x24, r24	; 36
	TCCR0B	=0b011;
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	85 bd       	out	0x25, r24	; 37
	OCR0A		=duty_value;
  98:	80 91 00 01 	lds	r24, 0x0100
  9c:	87 bd       	out	0x27, r24	; 39
  9e:	08 95       	ret

000000a0 <USART_Transmit>:
	TIMSK0=0;
}

void USART_Transmit(unsigned char data)//USARTの初期化関数
{
	while(!(UCSR0A&(1<<UDRE0)));			//送信ﾊﾞｯﾌｧ空き待機 
  a0:	e0 ec       	ldi	r30, 0xC0	; 192
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 81       	ld	r25, Z
  a6:	95 ff       	sbrs	r25, 5
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <USART_Transmit+0x4>
	UDR0=data;												//ﾃﾞｰﾀ送信(送信開始)
  aa:	80 93 c6 00 	sts	0x00C6, r24
  ae:	08 95       	ret

000000b0 <USART_initialize>:
}

void USART_initialize(){
	UBRR0H=0;
  b0:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=103;												//U2X0=1,8MHzのときUBBR=103で9600bps
  b4:	87 e6       	ldi	r24, 0x67	; 103
  b6:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A|=0b00000010;								//U2X0の設定
  ba:	e0 ec       	ldi	r30, 0xC0	; 192
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	80 83       	st	Z, r24
	UCSR0C=0b00001110;
  c4:	8e e0       	ldi	r24, 0x0E	; 14
  c6:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B=0b00011000;								//USARTの動作開始
  ca:	88 e1       	ldi	r24, 0x18	; 24
  cc:	80 93 c1 00 	sts	0x00C1, r24
  d0:	08 95       	ret

000000d2 <ADC_initialize>:
}

void ADC_initialize(){
ADMUX = (0<<REFS0);									//外部基準電圧の選択
  d2:	10 92 7c 00 	sts	0x007C, r1
ADCSRA =(1<<ADEN)|(1<<ADSC)|(0<<ADPS0);// A/D変換許可、1回目変換開始(調整)、分周率2
  d6:	80 ec       	ldi	r24, 0xC0	; 192
  d8:	80 93 7a 00 	sts	0x007A, r24
  dc:	08 95       	ret

000000de <ADC_convert>:
}

uint16_t ADC_convert(char pin){
	uint16_t ad;
	ADMUX = pin;											// AD変換入力ピン
  de:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA&=~(1<<ADIF);
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	8f 7e       	andi	r24, 0xEF	; 239
  ea:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADSC);								// 変換開始
  ec:	80 81       	ld	r24, Z
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	80 83       	st	Z, r24
	loop_until_bit_is_set(ADCSRA,ADIF); // 変換完了まで待つ
  f2:	80 81       	ld	r24, Z
  f4:	84 ff       	sbrs	r24, 4
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <ADC_convert+0x14>
	ad = ADCL;												// 下位8bit取得
  f8:	20 91 78 00 	lds	r18, 0x0078
	return ad += (ADCH<<8);						// 上位2bit取得
  fc:	80 91 79 00 	lds	r24, 0x0079
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	98 2f       	mov	r25, r24
 104:	88 27       	eor	r24, r24
}
 106:	82 0f       	add	r24, r18
 108:	91 1d       	adc	r25, r1
 10a:	08 95       	ret

0000010c <PWM_HIGH>:

void PWM_HIGH(){										//PWM HIGH時の実行関数
	LED_ON();
 10c:	45 9a       	sbi	0x08, 5	; 8
 10e:	08 95       	ret

00000110 <PWM_LOW>:
}
void PWM_LOW(){											//PWM LOW時の実行関数
	LED_OFF();
 110:	45 98       	cbi	0x08, 5	; 8
 112:	08 95       	ret

00000114 <__vector_14>:
#endif

uint8_t duty_value=0;								//duty比設定変数	0から255まで　ただし0でも消灯はしない

ISR(TIMER0_COMPA_vect)							//PWM	TIMER割り込みの割り込み関数
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	3f 93       	push	r19
 122:	4f 93       	push	r20
 124:	5f 93       	push	r21
 126:	6f 93       	push	r22
 128:	7f 93       	push	r23
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	af 93       	push	r26
 130:	bf 93       	push	r27
 132:	ef 93       	push	r30
 134:	ff 93       	push	r31
	#if DEBUG==0											//ここではduty比をだんだんあげるデバックをしている
	if (count%5==0)
 136:	80 91 01 01 	lds	r24, 0x0101
 13a:	9d ec       	ldi	r25, 0xCD	; 205
 13c:	89 9f       	mul	r24, r25
 13e:	91 2d       	mov	r25, r1
 140:	11 24       	eor	r1, r1
 142:	96 95       	lsr	r25
 144:	96 95       	lsr	r25
 146:	29 2f       	mov	r18, r25
 148:	22 0f       	add	r18, r18
 14a:	22 0f       	add	r18, r18
 14c:	92 0f       	add	r25, r18
 14e:	89 13       	cpse	r24, r25
 150:	05 c0       	rjmp	.+10     	; 0x15c <__vector_14+0x48>
	{
		duty_value++;
 152:	90 91 00 01 	lds	r25, 0x0100
 156:	9f 5f       	subi	r25, 0xFF	; 255
 158:	90 93 00 01 	sts	0x0100, r25
	}
	count++;
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	80 93 01 01 	sts	0x0101, r24
	#endif
	
	if (OCR0A==duty_value)	
 162:	97 b5       	in	r25, 0x27	; 39
 164:	80 91 00 01 	lds	r24, 0x0100
 168:	98 13       	cpse	r25, r24
 16a:	05 c0       	rjmp	.+10     	; 0x176 <__vector_14+0x62>
	{
		OCR0A=255-duty_value;						//比較レジスタを反転
 16c:	90 95       	com	r25
 16e:	97 bd       	out	0x27, r25	; 39
		PWM_LOW();
 170:	0e 94 88 00 	call	0x110	; 0x110 <PWM_LOW>
 174:	03 c0       	rjmp	.+6      	; 0x17c <__vector_14+0x68>
	}else{
		OCR0A=duty_value;								//比較レジスタを反転
 176:	87 bd       	out	0x27, r24	; 39
		PWM_HIGH();
 178:	0e 94 86 00 	call	0x10c	; 0x10c <PWM_HIGH>
	}
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	bf 91       	pop	r27
 182:	af 91       	pop	r26
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	7f 91       	pop	r23
 18a:	6f 91       	pop	r22
 18c:	5f 91       	pop	r21
 18e:	4f 91       	pop	r20
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <get_degree>:
}
void PWM_LOW(){											//PWM LOW時の実行関数
	LED_OFF();
}

uint16_t get_degree(){
 19e:	ef 92       	push	r14
 1a0:	ff 92       	push	r15
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
	double d[3];
	d[0]=((((double)ADC_convert(2))/1024)*VDD-1650)/660+1;
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	0e 94 6f 00 	call	0xde	; 0xde <ADC_convert>
 1b0:	7c 01       	movw	r14, r24
	d[1]=((((double)ADC_convert(3))/1024)*VDD-1650)/660+1;
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	0e 94 6f 00 	call	0xde	; 0xde <ADC_convert>
 1b8:	8c 01       	movw	r16, r24
	d[2]=((((double)ADC_convert(4))/1024)*VDD-1650)/660+1;
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	0e 94 6f 00 	call	0xde	; 0xde <ADC_convert>
 1c0:	ec 01       	movw	r28, r24
	LED_OFF();
}

uint16_t get_degree(){
	double d[3];
	d[0]=((((double)ADC_convert(2))/1024)*VDD-1650)/660+1;
 1c2:	b7 01       	movw	r22, r14
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 8c 02 	call	0x518	; 0x518 <__floatunsisf>
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	40 e8       	ldi	r20, 0x80	; 128
 1d2:	5a e3       	ldi	r21, 0x3A	; 58
 1d4:	0e 94 1a 03 	call	0x634	; 0x634 <__mulsf3>
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e4       	ldi	r19, 0x40	; 64
 1dc:	4c e9       	ldi	r20, 0x9C	; 156
 1de:	55 e4       	ldi	r21, 0x45	; 69
 1e0:	0e 94 1a 03 	call	0x634	; 0x634 <__mulsf3>
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	30 e4       	ldi	r19, 0x40	; 64
 1e8:	4e ec       	ldi	r20, 0xCE	; 206
 1ea:	54 e4       	ldi	r21, 0x44	; 68
 1ec:	0e 94 8e 01 	call	0x31c	; 0x31c <__subsf3>
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	45 e2       	ldi	r20, 0x25	; 37
 1f6:	54 e4       	ldi	r21, 0x44	; 68
 1f8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__divsf3>
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 e8       	ldi	r20, 0x80	; 128
 202:	5f e3       	ldi	r21, 0x3F	; 63
 204:	0e 94 8f 01 	call	0x31e	; 0x31e <__addsf3>
	d[1]=((((double)ADC_convert(3))/1024)*VDD-1650)/660+1;
	d[2]=((((double)ADC_convert(4))/1024)*VDD-1650)/660+1;
	
	USART_Transmit((int)(d[0]*100));
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	48 ec       	ldi	r20, 0xC8	; 200
 20e:	52 e4       	ldi	r21, 0x42	; 66
 210:	0e 94 1a 03 	call	0x634	; 0x634 <__mulsf3>
 214:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__fixsfsi>
 218:	86 2f       	mov	r24, r22
 21a:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
}

uint16_t get_degree(){
	double d[3];
	d[0]=((((double)ADC_convert(2))/1024)*VDD-1650)/660+1;
	d[1]=((((double)ADC_convert(3))/1024)*VDD-1650)/660+1;
 21e:	b8 01       	movw	r22, r16
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 8c 02 	call	0x518	; 0x518 <__floatunsisf>
 228:	20 e0       	ldi	r18, 0x00	; 0
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	40 e8       	ldi	r20, 0x80	; 128
 22e:	5a e3       	ldi	r21, 0x3A	; 58
 230:	0e 94 1a 03 	call	0x634	; 0x634 <__mulsf3>
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e4       	ldi	r19, 0x40	; 64
 238:	4c e9       	ldi	r20, 0x9C	; 156
 23a:	55 e4       	ldi	r21, 0x45	; 69
 23c:	0e 94 1a 03 	call	0x634	; 0x634 <__mulsf3>
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e4       	ldi	r19, 0x40	; 64
 244:	4e ec       	ldi	r20, 0xCE	; 206
 246:	54 e4       	ldi	r21, 0x44	; 68
 248:	0e 94 8e 01 	call	0x31c	; 0x31c <__subsf3>
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	45 e2       	ldi	r20, 0x25	; 37
 252:	54 e4       	ldi	r21, 0x44	; 68
 254:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__divsf3>
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	40 e8       	ldi	r20, 0x80	; 128
 25e:	5f e3       	ldi	r21, 0x3F	; 63
 260:	0e 94 8f 01 	call	0x31e	; 0x31e <__addsf3>
	d[2]=((((double)ADC_convert(4))/1024)*VDD-1650)/660+1;
	
	USART_Transmit((int)(d[0]*100));
	USART_Transmit((int)(d[1]*100));
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	48 ec       	ldi	r20, 0xC8	; 200
 26a:	52 e4       	ldi	r21, 0x42	; 66
 26c:	0e 94 1a 03 	call	0x634	; 0x634 <__mulsf3>
 270:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__fixsfsi>
 274:	86 2f       	mov	r24, r22
 276:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>

uint16_t get_degree(){
	double d[3];
	d[0]=((((double)ADC_convert(2))/1024)*VDD-1650)/660+1;
	d[1]=((((double)ADC_convert(3))/1024)*VDD-1650)/660+1;
	d[2]=((((double)ADC_convert(4))/1024)*VDD-1650)/660+1;
 27a:	be 01       	movw	r22, r28
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 8c 02 	call	0x518	; 0x518 <__floatunsisf>
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	40 e8       	ldi	r20, 0x80	; 128
 28a:	5a e3       	ldi	r21, 0x3A	; 58
 28c:	0e 94 1a 03 	call	0x634	; 0x634 <__mulsf3>
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e4       	ldi	r19, 0x40	; 64
 294:	4c e9       	ldi	r20, 0x9C	; 156
 296:	55 e4       	ldi	r21, 0x45	; 69
 298:	0e 94 1a 03 	call	0x634	; 0x634 <__mulsf3>
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	30 e4       	ldi	r19, 0x40	; 64
 2a0:	4e ec       	ldi	r20, 0xCE	; 206
 2a2:	54 e4       	ldi	r21, 0x44	; 68
 2a4:	0e 94 8e 01 	call	0x31c	; 0x31c <__subsf3>
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	45 e2       	ldi	r20, 0x25	; 37
 2ae:	54 e4       	ldi	r21, 0x44	; 68
 2b0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__divsf3>
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	40 e8       	ldi	r20, 0x80	; 128
 2ba:	5f e3       	ldi	r21, 0x3F	; 63
 2bc:	0e 94 8f 01 	call	0x31e	; 0x31e <__addsf3>
	
	USART_Transmit((int)(d[0]*100));
	USART_Transmit((int)(d[1]*100));
	USART_Transmit((int)(d[2]*100));
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	48 ec       	ldi	r20, 0xC8	; 200
 2c6:	52 e4       	ldi	r21, 0x42	; 66
 2c8:	0e 94 1a 03 	call	0x634	; 0x634 <__mulsf3>
 2cc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__fixsfsi>
 2d0:	86 2f       	mov	r24, r22
 2d2:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
	return 0;
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	ff 90       	pop	r15
 2e4:	ef 90       	pop	r14
 2e6:	08 95       	ret

000002e8 <main>:
	}
}

int main(void)
{
	USART_initialize();								//USARTの初期化		USARTっていうのはSerial通信のことで、デバッグ用。わかんなかったら無視してもいいよ。
 2e8:	0e 94 58 00 	call	0xb0	; 0xb0 <USART_initialize>
	PWM_initialize();									//PWMの初期化			PWMを使うときはPWM_initialize()→PWM_ON()→duty比設定→PWM_OFF()
 2ec:	0e 94 48 00 	call	0x90	; 0x90 <PWM_initialize>
																		//LEDをONするとき、LEDをOFFにするときはPWM_OFF()を実行すること
	ADC_initialize();									//ADCの初期化			ADCを使うときはADC_initialize()→ADC_convert(char pin)
 2f0:	0e 94 69 00 	call	0xd2	; 0xd2 <ADC_initialize>
	
	USART_Transmit(20);
 2f4:	84 e1       	ldi	r24, 0x14	; 20
 2f6:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
	DDRC|=(1<<5);											//LEDの初期設定
 2fa:	3d 9a       	sbi	0x07, 5	; 7
	sei();														//割り込み許可するおまじない
 2fc:	78 94       	sei


    while(1)
    {
	    uint16_t var=ADC_convert(0);	//ADCがよんだ値をvarに代入
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 6f 00 	call	0xde	; 0xde <ADC_convert>
	    //USART_Transmit(var>>8);				//上位バイトをUSART送信
	    //USART_Transmit(var);					//下位バイトをUSART送信
			get_degree();
 304:	0e 94 cf 00 	call	0x19e	; 0x19e <get_degree>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 308:	2f ef       	ldi	r18, 0xFF	; 255
 30a:	84 e3       	ldi	r24, 0x34	; 52
 30c:	9c e0       	ldi	r25, 0x0C	; 12
 30e:	21 50       	subi	r18, 0x01	; 1
 310:	80 40       	sbci	r24, 0x00	; 0
 312:	90 40       	sbci	r25, 0x00	; 0
 314:	e1 f7       	brne	.-8      	; 0x30e <main+0x26>
 316:	00 c0       	rjmp	.+0      	; 0x318 <main+0x30>
 318:	00 00       	nop
 31a:	f1 cf       	rjmp	.-30     	; 0x2fe <main+0x16>

0000031c <__subsf3>:
 31c:	50 58       	subi	r21, 0x80	; 128

0000031e <__addsf3>:
 31e:	bb 27       	eor	r27, r27
 320:	aa 27       	eor	r26, r26
 322:	0e d0       	rcall	.+28     	; 0x340 <__addsf3x>
 324:	4d c1       	rjmp	.+666    	; 0x5c0 <__fp_round>
 326:	3e d1       	rcall	.+636    	; 0x5a4 <__fp_pscA>
 328:	30 f0       	brcs	.+12     	; 0x336 <__addsf3+0x18>
 32a:	43 d1       	rcall	.+646    	; 0x5b2 <__fp_pscB>
 32c:	20 f0       	brcs	.+8      	; 0x336 <__addsf3+0x18>
 32e:	31 f4       	brne	.+12     	; 0x33c <__addsf3+0x1e>
 330:	9f 3f       	cpi	r25, 0xFF	; 255
 332:	11 f4       	brne	.+4      	; 0x338 <__addsf3+0x1a>
 334:	1e f4       	brtc	.+6      	; 0x33c <__addsf3+0x1e>
 336:	33 c1       	rjmp	.+614    	; 0x59e <__fp_nan>
 338:	0e f4       	brtc	.+2      	; 0x33c <__addsf3+0x1e>
 33a:	e0 95       	com	r30
 33c:	e7 fb       	bst	r30, 7
 33e:	29 c1       	rjmp	.+594    	; 0x592 <__fp_inf>

00000340 <__addsf3x>:
 340:	e9 2f       	mov	r30, r25
 342:	4f d1       	rcall	.+670    	; 0x5e2 <__fp_split3>
 344:	80 f3       	brcs	.-32     	; 0x326 <__addsf3+0x8>
 346:	ba 17       	cp	r27, r26
 348:	62 07       	cpc	r22, r18
 34a:	73 07       	cpc	r23, r19
 34c:	84 07       	cpc	r24, r20
 34e:	95 07       	cpc	r25, r21
 350:	18 f0       	brcs	.+6      	; 0x358 <__addsf3x+0x18>
 352:	71 f4       	brne	.+28     	; 0x370 <__addsf3x+0x30>
 354:	9e f5       	brtc	.+102    	; 0x3bc <__addsf3x+0x7c>
 356:	67 c1       	rjmp	.+718    	; 0x626 <__fp_zero>
 358:	0e f4       	brtc	.+2      	; 0x35c <__addsf3x+0x1c>
 35a:	e0 95       	com	r30
 35c:	0b 2e       	mov	r0, r27
 35e:	ba 2f       	mov	r27, r26
 360:	a0 2d       	mov	r26, r0
 362:	0b 01       	movw	r0, r22
 364:	b9 01       	movw	r22, r18
 366:	90 01       	movw	r18, r0
 368:	0c 01       	movw	r0, r24
 36a:	ca 01       	movw	r24, r20
 36c:	a0 01       	movw	r20, r0
 36e:	11 24       	eor	r1, r1
 370:	ff 27       	eor	r31, r31
 372:	59 1b       	sub	r21, r25
 374:	99 f0       	breq	.+38     	; 0x39c <__addsf3x+0x5c>
 376:	59 3f       	cpi	r21, 0xF9	; 249
 378:	50 f4       	brcc	.+20     	; 0x38e <__addsf3x+0x4e>
 37a:	50 3e       	cpi	r21, 0xE0	; 224
 37c:	68 f1       	brcs	.+90     	; 0x3d8 <__addsf3x+0x98>
 37e:	1a 16       	cp	r1, r26
 380:	f0 40       	sbci	r31, 0x00	; 0
 382:	a2 2f       	mov	r26, r18
 384:	23 2f       	mov	r18, r19
 386:	34 2f       	mov	r19, r20
 388:	44 27       	eor	r20, r20
 38a:	58 5f       	subi	r21, 0xF8	; 248
 38c:	f3 cf       	rjmp	.-26     	; 0x374 <__addsf3x+0x34>
 38e:	46 95       	lsr	r20
 390:	37 95       	ror	r19
 392:	27 95       	ror	r18
 394:	a7 95       	ror	r26
 396:	f0 40       	sbci	r31, 0x00	; 0
 398:	53 95       	inc	r21
 39a:	c9 f7       	brne	.-14     	; 0x38e <__addsf3x+0x4e>
 39c:	7e f4       	brtc	.+30     	; 0x3bc <__addsf3x+0x7c>
 39e:	1f 16       	cp	r1, r31
 3a0:	ba 0b       	sbc	r27, r26
 3a2:	62 0b       	sbc	r22, r18
 3a4:	73 0b       	sbc	r23, r19
 3a6:	84 0b       	sbc	r24, r20
 3a8:	ba f0       	brmi	.+46     	; 0x3d8 <__addsf3x+0x98>
 3aa:	91 50       	subi	r25, 0x01	; 1
 3ac:	a1 f0       	breq	.+40     	; 0x3d6 <__addsf3x+0x96>
 3ae:	ff 0f       	add	r31, r31
 3b0:	bb 1f       	adc	r27, r27
 3b2:	66 1f       	adc	r22, r22
 3b4:	77 1f       	adc	r23, r23
 3b6:	88 1f       	adc	r24, r24
 3b8:	c2 f7       	brpl	.-16     	; 0x3aa <__addsf3x+0x6a>
 3ba:	0e c0       	rjmp	.+28     	; 0x3d8 <__addsf3x+0x98>
 3bc:	ba 0f       	add	r27, r26
 3be:	62 1f       	adc	r22, r18
 3c0:	73 1f       	adc	r23, r19
 3c2:	84 1f       	adc	r24, r20
 3c4:	48 f4       	brcc	.+18     	; 0x3d8 <__addsf3x+0x98>
 3c6:	87 95       	ror	r24
 3c8:	77 95       	ror	r23
 3ca:	67 95       	ror	r22
 3cc:	b7 95       	ror	r27
 3ce:	f7 95       	ror	r31
 3d0:	9e 3f       	cpi	r25, 0xFE	; 254
 3d2:	08 f0       	brcs	.+2      	; 0x3d6 <__addsf3x+0x96>
 3d4:	b3 cf       	rjmp	.-154    	; 0x33c <__addsf3+0x1e>
 3d6:	93 95       	inc	r25
 3d8:	88 0f       	add	r24, r24
 3da:	08 f0       	brcs	.+2      	; 0x3de <__addsf3x+0x9e>
 3dc:	99 27       	eor	r25, r25
 3de:	ee 0f       	add	r30, r30
 3e0:	97 95       	ror	r25
 3e2:	87 95       	ror	r24
 3e4:	08 95       	ret

000003e6 <__divsf3>:
 3e6:	0c d0       	rcall	.+24     	; 0x400 <__divsf3x>
 3e8:	eb c0       	rjmp	.+470    	; 0x5c0 <__fp_round>
 3ea:	e3 d0       	rcall	.+454    	; 0x5b2 <__fp_pscB>
 3ec:	40 f0       	brcs	.+16     	; 0x3fe <__divsf3+0x18>
 3ee:	da d0       	rcall	.+436    	; 0x5a4 <__fp_pscA>
 3f0:	30 f0       	brcs	.+12     	; 0x3fe <__divsf3+0x18>
 3f2:	21 f4       	brne	.+8      	; 0x3fc <__divsf3+0x16>
 3f4:	5f 3f       	cpi	r21, 0xFF	; 255
 3f6:	19 f0       	breq	.+6      	; 0x3fe <__divsf3+0x18>
 3f8:	cc c0       	rjmp	.+408    	; 0x592 <__fp_inf>
 3fa:	51 11       	cpse	r21, r1
 3fc:	15 c1       	rjmp	.+554    	; 0x628 <__fp_szero>
 3fe:	cf c0       	rjmp	.+414    	; 0x59e <__fp_nan>

00000400 <__divsf3x>:
 400:	f0 d0       	rcall	.+480    	; 0x5e2 <__fp_split3>
 402:	98 f3       	brcs	.-26     	; 0x3ea <__divsf3+0x4>

00000404 <__divsf3_pse>:
 404:	99 23       	and	r25, r25
 406:	c9 f3       	breq	.-14     	; 0x3fa <__divsf3+0x14>
 408:	55 23       	and	r21, r21
 40a:	b1 f3       	breq	.-20     	; 0x3f8 <__divsf3+0x12>
 40c:	95 1b       	sub	r25, r21
 40e:	55 0b       	sbc	r21, r21
 410:	bb 27       	eor	r27, r27
 412:	aa 27       	eor	r26, r26
 414:	62 17       	cp	r22, r18
 416:	73 07       	cpc	r23, r19
 418:	84 07       	cpc	r24, r20
 41a:	38 f0       	brcs	.+14     	; 0x42a <__divsf3_pse+0x26>
 41c:	9f 5f       	subi	r25, 0xFF	; 255
 41e:	5f 4f       	sbci	r21, 0xFF	; 255
 420:	22 0f       	add	r18, r18
 422:	33 1f       	adc	r19, r19
 424:	44 1f       	adc	r20, r20
 426:	aa 1f       	adc	r26, r26
 428:	a9 f3       	breq	.-22     	; 0x414 <__divsf3_pse+0x10>
 42a:	33 d0       	rcall	.+102    	; 0x492 <__divsf3_pse+0x8e>
 42c:	0e 2e       	mov	r0, r30
 42e:	3a f0       	brmi	.+14     	; 0x43e <__divsf3_pse+0x3a>
 430:	e0 e8       	ldi	r30, 0x80	; 128
 432:	30 d0       	rcall	.+96     	; 0x494 <__divsf3_pse+0x90>
 434:	91 50       	subi	r25, 0x01	; 1
 436:	50 40       	sbci	r21, 0x00	; 0
 438:	e6 95       	lsr	r30
 43a:	00 1c       	adc	r0, r0
 43c:	ca f7       	brpl	.-14     	; 0x430 <__divsf3_pse+0x2c>
 43e:	29 d0       	rcall	.+82     	; 0x492 <__divsf3_pse+0x8e>
 440:	fe 2f       	mov	r31, r30
 442:	27 d0       	rcall	.+78     	; 0x492 <__divsf3_pse+0x8e>
 444:	66 0f       	add	r22, r22
 446:	77 1f       	adc	r23, r23
 448:	88 1f       	adc	r24, r24
 44a:	bb 1f       	adc	r27, r27
 44c:	26 17       	cp	r18, r22
 44e:	37 07       	cpc	r19, r23
 450:	48 07       	cpc	r20, r24
 452:	ab 07       	cpc	r26, r27
 454:	b0 e8       	ldi	r27, 0x80	; 128
 456:	09 f0       	breq	.+2      	; 0x45a <__divsf3_pse+0x56>
 458:	bb 0b       	sbc	r27, r27
 45a:	80 2d       	mov	r24, r0
 45c:	bf 01       	movw	r22, r30
 45e:	ff 27       	eor	r31, r31
 460:	93 58       	subi	r25, 0x83	; 131
 462:	5f 4f       	sbci	r21, 0xFF	; 255
 464:	2a f0       	brmi	.+10     	; 0x470 <__divsf3_pse+0x6c>
 466:	9e 3f       	cpi	r25, 0xFE	; 254
 468:	51 05       	cpc	r21, r1
 46a:	68 f0       	brcs	.+26     	; 0x486 <__divsf3_pse+0x82>
 46c:	92 c0       	rjmp	.+292    	; 0x592 <__fp_inf>
 46e:	dc c0       	rjmp	.+440    	; 0x628 <__fp_szero>
 470:	5f 3f       	cpi	r21, 0xFF	; 255
 472:	ec f3       	brlt	.-6      	; 0x46e <__divsf3_pse+0x6a>
 474:	98 3e       	cpi	r25, 0xE8	; 232
 476:	dc f3       	brlt	.-10     	; 0x46e <__divsf3_pse+0x6a>
 478:	86 95       	lsr	r24
 47a:	77 95       	ror	r23
 47c:	67 95       	ror	r22
 47e:	b7 95       	ror	r27
 480:	f7 95       	ror	r31
 482:	9f 5f       	subi	r25, 0xFF	; 255
 484:	c9 f7       	brne	.-14     	; 0x478 <__divsf3_pse+0x74>
 486:	88 0f       	add	r24, r24
 488:	91 1d       	adc	r25, r1
 48a:	96 95       	lsr	r25
 48c:	87 95       	ror	r24
 48e:	97 f9       	bld	r25, 7
 490:	08 95       	ret
 492:	e1 e0       	ldi	r30, 0x01	; 1
 494:	66 0f       	add	r22, r22
 496:	77 1f       	adc	r23, r23
 498:	88 1f       	adc	r24, r24
 49a:	bb 1f       	adc	r27, r27
 49c:	62 17       	cp	r22, r18
 49e:	73 07       	cpc	r23, r19
 4a0:	84 07       	cpc	r24, r20
 4a2:	ba 07       	cpc	r27, r26
 4a4:	20 f0       	brcs	.+8      	; 0x4ae <__divsf3_pse+0xaa>
 4a6:	62 1b       	sub	r22, r18
 4a8:	73 0b       	sbc	r23, r19
 4aa:	84 0b       	sbc	r24, r20
 4ac:	ba 0b       	sbc	r27, r26
 4ae:	ee 1f       	adc	r30, r30
 4b0:	88 f7       	brcc	.-30     	; 0x494 <__divsf3_pse+0x90>
 4b2:	e0 95       	com	r30
 4b4:	08 95       	ret

000004b6 <__fixsfsi>:
 4b6:	04 d0       	rcall	.+8      	; 0x4c0 <__fixunssfsi>
 4b8:	68 94       	set
 4ba:	b1 11       	cpse	r27, r1
 4bc:	b5 c0       	rjmp	.+362    	; 0x628 <__fp_szero>
 4be:	08 95       	ret

000004c0 <__fixunssfsi>:
 4c0:	98 d0       	rcall	.+304    	; 0x5f2 <__fp_splitA>
 4c2:	88 f0       	brcs	.+34     	; 0x4e6 <__fixunssfsi+0x26>
 4c4:	9f 57       	subi	r25, 0x7F	; 127
 4c6:	90 f0       	brcs	.+36     	; 0x4ec <__fixunssfsi+0x2c>
 4c8:	b9 2f       	mov	r27, r25
 4ca:	99 27       	eor	r25, r25
 4cc:	b7 51       	subi	r27, 0x17	; 23
 4ce:	a0 f0       	brcs	.+40     	; 0x4f8 <__fixunssfsi+0x38>
 4d0:	d1 f0       	breq	.+52     	; 0x506 <__stack+0x7>
 4d2:	66 0f       	add	r22, r22
 4d4:	77 1f       	adc	r23, r23
 4d6:	88 1f       	adc	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	1a f0       	brmi	.+6      	; 0x4e2 <__fixunssfsi+0x22>
 4dc:	ba 95       	dec	r27
 4de:	c9 f7       	brne	.-14     	; 0x4d2 <__fixunssfsi+0x12>
 4e0:	12 c0       	rjmp	.+36     	; 0x506 <__stack+0x7>
 4e2:	b1 30       	cpi	r27, 0x01	; 1
 4e4:	81 f0       	breq	.+32     	; 0x506 <__stack+0x7>
 4e6:	9f d0       	rcall	.+318    	; 0x626 <__fp_zero>
 4e8:	b1 e0       	ldi	r27, 0x01	; 1
 4ea:	08 95       	ret
 4ec:	9c c0       	rjmp	.+312    	; 0x626 <__fp_zero>
 4ee:	67 2f       	mov	r22, r23
 4f0:	78 2f       	mov	r23, r24
 4f2:	88 27       	eor	r24, r24
 4f4:	b8 5f       	subi	r27, 0xF8	; 248
 4f6:	39 f0       	breq	.+14     	; 0x506 <__stack+0x7>
 4f8:	b9 3f       	cpi	r27, 0xF9	; 249
 4fa:	cc f3       	brlt	.-14     	; 0x4ee <__fixunssfsi+0x2e>
 4fc:	86 95       	lsr	r24
 4fe:	77 95       	ror	r23
 500:	67 95       	ror	r22
 502:	b3 95       	inc	r27
 504:	d9 f7       	brne	.-10     	; 0x4fc <__fixunssfsi+0x3c>
 506:	3e f4       	brtc	.+14     	; 0x516 <__stack+0x17>
 508:	90 95       	com	r25
 50a:	80 95       	com	r24
 50c:	70 95       	com	r23
 50e:	61 95       	neg	r22
 510:	7f 4f       	sbci	r23, 0xFF	; 255
 512:	8f 4f       	sbci	r24, 0xFF	; 255
 514:	9f 4f       	sbci	r25, 0xFF	; 255
 516:	08 95       	ret

00000518 <__floatunsisf>:
 518:	e8 94       	clt
 51a:	09 c0       	rjmp	.+18     	; 0x52e <__floatsisf+0x12>

0000051c <__floatsisf>:
 51c:	97 fb       	bst	r25, 7
 51e:	3e f4       	brtc	.+14     	; 0x52e <__floatsisf+0x12>
 520:	90 95       	com	r25
 522:	80 95       	com	r24
 524:	70 95       	com	r23
 526:	61 95       	neg	r22
 528:	7f 4f       	sbci	r23, 0xFF	; 255
 52a:	8f 4f       	sbci	r24, 0xFF	; 255
 52c:	9f 4f       	sbci	r25, 0xFF	; 255
 52e:	99 23       	and	r25, r25
 530:	a9 f0       	breq	.+42     	; 0x55c <__floatsisf+0x40>
 532:	f9 2f       	mov	r31, r25
 534:	96 e9       	ldi	r25, 0x96	; 150
 536:	bb 27       	eor	r27, r27
 538:	93 95       	inc	r25
 53a:	f6 95       	lsr	r31
 53c:	87 95       	ror	r24
 53e:	77 95       	ror	r23
 540:	67 95       	ror	r22
 542:	b7 95       	ror	r27
 544:	f1 11       	cpse	r31, r1
 546:	f8 cf       	rjmp	.-16     	; 0x538 <__floatsisf+0x1c>
 548:	fa f4       	brpl	.+62     	; 0x588 <__floatsisf+0x6c>
 54a:	bb 0f       	add	r27, r27
 54c:	11 f4       	brne	.+4      	; 0x552 <__floatsisf+0x36>
 54e:	60 ff       	sbrs	r22, 0
 550:	1b c0       	rjmp	.+54     	; 0x588 <__floatsisf+0x6c>
 552:	6f 5f       	subi	r22, 0xFF	; 255
 554:	7f 4f       	sbci	r23, 0xFF	; 255
 556:	8f 4f       	sbci	r24, 0xFF	; 255
 558:	9f 4f       	sbci	r25, 0xFF	; 255
 55a:	16 c0       	rjmp	.+44     	; 0x588 <__floatsisf+0x6c>
 55c:	88 23       	and	r24, r24
 55e:	11 f0       	breq	.+4      	; 0x564 <__floatsisf+0x48>
 560:	96 e9       	ldi	r25, 0x96	; 150
 562:	11 c0       	rjmp	.+34     	; 0x586 <__floatsisf+0x6a>
 564:	77 23       	and	r23, r23
 566:	21 f0       	breq	.+8      	; 0x570 <__floatsisf+0x54>
 568:	9e e8       	ldi	r25, 0x8E	; 142
 56a:	87 2f       	mov	r24, r23
 56c:	76 2f       	mov	r23, r22
 56e:	05 c0       	rjmp	.+10     	; 0x57a <__floatsisf+0x5e>
 570:	66 23       	and	r22, r22
 572:	71 f0       	breq	.+28     	; 0x590 <__floatsisf+0x74>
 574:	96 e8       	ldi	r25, 0x86	; 134
 576:	86 2f       	mov	r24, r22
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	2a f0       	brmi	.+10     	; 0x588 <__floatsisf+0x6c>
 57e:	9a 95       	dec	r25
 580:	66 0f       	add	r22, r22
 582:	77 1f       	adc	r23, r23
 584:	88 1f       	adc	r24, r24
 586:	da f7       	brpl	.-10     	; 0x57e <__floatsisf+0x62>
 588:	88 0f       	add	r24, r24
 58a:	96 95       	lsr	r25
 58c:	87 95       	ror	r24
 58e:	97 f9       	bld	r25, 7
 590:	08 95       	ret

00000592 <__fp_inf>:
 592:	97 f9       	bld	r25, 7
 594:	9f 67       	ori	r25, 0x7F	; 127
 596:	80 e8       	ldi	r24, 0x80	; 128
 598:	70 e0       	ldi	r23, 0x00	; 0
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	08 95       	ret

0000059e <__fp_nan>:
 59e:	9f ef       	ldi	r25, 0xFF	; 255
 5a0:	80 ec       	ldi	r24, 0xC0	; 192
 5a2:	08 95       	ret

000005a4 <__fp_pscA>:
 5a4:	00 24       	eor	r0, r0
 5a6:	0a 94       	dec	r0
 5a8:	16 16       	cp	r1, r22
 5aa:	17 06       	cpc	r1, r23
 5ac:	18 06       	cpc	r1, r24
 5ae:	09 06       	cpc	r0, r25
 5b0:	08 95       	ret

000005b2 <__fp_pscB>:
 5b2:	00 24       	eor	r0, r0
 5b4:	0a 94       	dec	r0
 5b6:	12 16       	cp	r1, r18
 5b8:	13 06       	cpc	r1, r19
 5ba:	14 06       	cpc	r1, r20
 5bc:	05 06       	cpc	r0, r21
 5be:	08 95       	ret

000005c0 <__fp_round>:
 5c0:	09 2e       	mov	r0, r25
 5c2:	03 94       	inc	r0
 5c4:	00 0c       	add	r0, r0
 5c6:	11 f4       	brne	.+4      	; 0x5cc <__fp_round+0xc>
 5c8:	88 23       	and	r24, r24
 5ca:	52 f0       	brmi	.+20     	; 0x5e0 <__fp_round+0x20>
 5cc:	bb 0f       	add	r27, r27
 5ce:	40 f4       	brcc	.+16     	; 0x5e0 <__fp_round+0x20>
 5d0:	bf 2b       	or	r27, r31
 5d2:	11 f4       	brne	.+4      	; 0x5d8 <__fp_round+0x18>
 5d4:	60 ff       	sbrs	r22, 0
 5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <__fp_round+0x20>
 5d8:	6f 5f       	subi	r22, 0xFF	; 255
 5da:	7f 4f       	sbci	r23, 0xFF	; 255
 5dc:	8f 4f       	sbci	r24, 0xFF	; 255
 5de:	9f 4f       	sbci	r25, 0xFF	; 255
 5e0:	08 95       	ret

000005e2 <__fp_split3>:
 5e2:	57 fd       	sbrc	r21, 7
 5e4:	90 58       	subi	r25, 0x80	; 128
 5e6:	44 0f       	add	r20, r20
 5e8:	55 1f       	adc	r21, r21
 5ea:	59 f0       	breq	.+22     	; 0x602 <__fp_splitA+0x10>
 5ec:	5f 3f       	cpi	r21, 0xFF	; 255
 5ee:	71 f0       	breq	.+28     	; 0x60c <__fp_splitA+0x1a>
 5f0:	47 95       	ror	r20

000005f2 <__fp_splitA>:
 5f2:	88 0f       	add	r24, r24
 5f4:	97 fb       	bst	r25, 7
 5f6:	99 1f       	adc	r25, r25
 5f8:	61 f0       	breq	.+24     	; 0x612 <__fp_splitA+0x20>
 5fa:	9f 3f       	cpi	r25, 0xFF	; 255
 5fc:	79 f0       	breq	.+30     	; 0x61c <__fp_splitA+0x2a>
 5fe:	87 95       	ror	r24
 600:	08 95       	ret
 602:	12 16       	cp	r1, r18
 604:	13 06       	cpc	r1, r19
 606:	14 06       	cpc	r1, r20
 608:	55 1f       	adc	r21, r21
 60a:	f2 cf       	rjmp	.-28     	; 0x5f0 <__fp_split3+0xe>
 60c:	46 95       	lsr	r20
 60e:	f1 df       	rcall	.-30     	; 0x5f2 <__fp_splitA>
 610:	08 c0       	rjmp	.+16     	; 0x622 <__fp_splitA+0x30>
 612:	16 16       	cp	r1, r22
 614:	17 06       	cpc	r1, r23
 616:	18 06       	cpc	r1, r24
 618:	99 1f       	adc	r25, r25
 61a:	f1 cf       	rjmp	.-30     	; 0x5fe <__fp_splitA+0xc>
 61c:	86 95       	lsr	r24
 61e:	71 05       	cpc	r23, r1
 620:	61 05       	cpc	r22, r1
 622:	08 94       	sec
 624:	08 95       	ret

00000626 <__fp_zero>:
 626:	e8 94       	clt

00000628 <__fp_szero>:
 628:	bb 27       	eor	r27, r27
 62a:	66 27       	eor	r22, r22
 62c:	77 27       	eor	r23, r23
 62e:	cb 01       	movw	r24, r22
 630:	97 f9       	bld	r25, 7
 632:	08 95       	ret

00000634 <__mulsf3>:
 634:	0b d0       	rcall	.+22     	; 0x64c <__mulsf3x>
 636:	c4 cf       	rjmp	.-120    	; 0x5c0 <__fp_round>
 638:	b5 df       	rcall	.-150    	; 0x5a4 <__fp_pscA>
 63a:	28 f0       	brcs	.+10     	; 0x646 <__mulsf3+0x12>
 63c:	ba df       	rcall	.-140    	; 0x5b2 <__fp_pscB>
 63e:	18 f0       	brcs	.+6      	; 0x646 <__mulsf3+0x12>
 640:	95 23       	and	r25, r21
 642:	09 f0       	breq	.+2      	; 0x646 <__mulsf3+0x12>
 644:	a6 cf       	rjmp	.-180    	; 0x592 <__fp_inf>
 646:	ab cf       	rjmp	.-170    	; 0x59e <__fp_nan>
 648:	11 24       	eor	r1, r1
 64a:	ee cf       	rjmp	.-36     	; 0x628 <__fp_szero>

0000064c <__mulsf3x>:
 64c:	ca df       	rcall	.-108    	; 0x5e2 <__fp_split3>
 64e:	a0 f3       	brcs	.-24     	; 0x638 <__mulsf3+0x4>

00000650 <__mulsf3_pse>:
 650:	95 9f       	mul	r25, r21
 652:	d1 f3       	breq	.-12     	; 0x648 <__mulsf3+0x14>
 654:	95 0f       	add	r25, r21
 656:	50 e0       	ldi	r21, 0x00	; 0
 658:	55 1f       	adc	r21, r21
 65a:	62 9f       	mul	r22, r18
 65c:	f0 01       	movw	r30, r0
 65e:	72 9f       	mul	r23, r18
 660:	bb 27       	eor	r27, r27
 662:	f0 0d       	add	r31, r0
 664:	b1 1d       	adc	r27, r1
 666:	63 9f       	mul	r22, r19
 668:	aa 27       	eor	r26, r26
 66a:	f0 0d       	add	r31, r0
 66c:	b1 1d       	adc	r27, r1
 66e:	aa 1f       	adc	r26, r26
 670:	64 9f       	mul	r22, r20
 672:	66 27       	eor	r22, r22
 674:	b0 0d       	add	r27, r0
 676:	a1 1d       	adc	r26, r1
 678:	66 1f       	adc	r22, r22
 67a:	82 9f       	mul	r24, r18
 67c:	22 27       	eor	r18, r18
 67e:	b0 0d       	add	r27, r0
 680:	a1 1d       	adc	r26, r1
 682:	62 1f       	adc	r22, r18
 684:	73 9f       	mul	r23, r19
 686:	b0 0d       	add	r27, r0
 688:	a1 1d       	adc	r26, r1
 68a:	62 1f       	adc	r22, r18
 68c:	83 9f       	mul	r24, r19
 68e:	a0 0d       	add	r26, r0
 690:	61 1d       	adc	r22, r1
 692:	22 1f       	adc	r18, r18
 694:	74 9f       	mul	r23, r20
 696:	33 27       	eor	r19, r19
 698:	a0 0d       	add	r26, r0
 69a:	61 1d       	adc	r22, r1
 69c:	23 1f       	adc	r18, r19
 69e:	84 9f       	mul	r24, r20
 6a0:	60 0d       	add	r22, r0
 6a2:	21 1d       	adc	r18, r1
 6a4:	82 2f       	mov	r24, r18
 6a6:	76 2f       	mov	r23, r22
 6a8:	6a 2f       	mov	r22, r26
 6aa:	11 24       	eor	r1, r1
 6ac:	9f 57       	subi	r25, 0x7F	; 127
 6ae:	50 40       	sbci	r21, 0x00	; 0
 6b0:	8a f0       	brmi	.+34     	; 0x6d4 <__mulsf3_pse+0x84>
 6b2:	e1 f0       	breq	.+56     	; 0x6ec <__mulsf3_pse+0x9c>
 6b4:	88 23       	and	r24, r24
 6b6:	4a f0       	brmi	.+18     	; 0x6ca <__mulsf3_pse+0x7a>
 6b8:	ee 0f       	add	r30, r30
 6ba:	ff 1f       	adc	r31, r31
 6bc:	bb 1f       	adc	r27, r27
 6be:	66 1f       	adc	r22, r22
 6c0:	77 1f       	adc	r23, r23
 6c2:	88 1f       	adc	r24, r24
 6c4:	91 50       	subi	r25, 0x01	; 1
 6c6:	50 40       	sbci	r21, 0x00	; 0
 6c8:	a9 f7       	brne	.-22     	; 0x6b4 <__mulsf3_pse+0x64>
 6ca:	9e 3f       	cpi	r25, 0xFE	; 254
 6cc:	51 05       	cpc	r21, r1
 6ce:	70 f0       	brcs	.+28     	; 0x6ec <__mulsf3_pse+0x9c>
 6d0:	60 cf       	rjmp	.-320    	; 0x592 <__fp_inf>
 6d2:	aa cf       	rjmp	.-172    	; 0x628 <__fp_szero>
 6d4:	5f 3f       	cpi	r21, 0xFF	; 255
 6d6:	ec f3       	brlt	.-6      	; 0x6d2 <__mulsf3_pse+0x82>
 6d8:	98 3e       	cpi	r25, 0xE8	; 232
 6da:	dc f3       	brlt	.-10     	; 0x6d2 <__mulsf3_pse+0x82>
 6dc:	86 95       	lsr	r24
 6de:	77 95       	ror	r23
 6e0:	67 95       	ror	r22
 6e2:	b7 95       	ror	r27
 6e4:	f7 95       	ror	r31
 6e6:	e7 95       	ror	r30
 6e8:	9f 5f       	subi	r25, 0xFF	; 255
 6ea:	c1 f7       	brne	.-16     	; 0x6dc <__mulsf3_pse+0x8c>
 6ec:	fe 2b       	or	r31, r30
 6ee:	88 0f       	add	r24, r24
 6f0:	91 1d       	adc	r25, r1
 6f2:	96 95       	lsr	r25
 6f4:	87 95       	ror	r24
 6f6:	97 f9       	bld	r25, 7
 6f8:	08 95       	ret

000006fa <_exit>:
 6fa:	f8 94       	cli

000006fc <__stop_program>:
 6fc:	ff cf       	rjmp	.-2      	; 0x6fc <__stop_program>
